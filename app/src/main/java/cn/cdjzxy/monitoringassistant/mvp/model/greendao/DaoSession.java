package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.Devices;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MethodDevRelation;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.Methods;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MethodTagRelation;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MonItemMethodRelation;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MonItems;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MonItemTagRelation;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.Rights;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.Tags;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.sampling.PendingTasks;
import cn.cdjzxy.monitoringassistant.mvp.model.entity.UserInfo;

import cn.cdjzxy.monitoringassistant.mvp.model.greendao.DevicesDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.MethodDevRelationDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.MethodsDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.MethodTagRelationDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.MonItemMethodRelationDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.MonItemsDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.MonItemTagRelationDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.RightsDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.TagsDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.PendingTasksDao;
import cn.cdjzxy.monitoringassistant.mvp.model.greendao.UserInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig devicesDaoConfig;
    private final DaoConfig methodDevRelationDaoConfig;
    private final DaoConfig methodsDaoConfig;
    private final DaoConfig methodTagRelationDaoConfig;
    private final DaoConfig monItemMethodRelationDaoConfig;
    private final DaoConfig monItemsDaoConfig;
    private final DaoConfig monItemTagRelationDaoConfig;
    private final DaoConfig rightsDaoConfig;
    private final DaoConfig tagsDaoConfig;
    private final DaoConfig pendingTasksDaoConfig;
    private final DaoConfig userInfoDaoConfig;

    private final DevicesDao devicesDao;
    private final MethodDevRelationDao methodDevRelationDao;
    private final MethodsDao methodsDao;
    private final MethodTagRelationDao methodTagRelationDao;
    private final MonItemMethodRelationDao monItemMethodRelationDao;
    private final MonItemsDao monItemsDao;
    private final MonItemTagRelationDao monItemTagRelationDao;
    private final RightsDao rightsDao;
    private final TagsDao tagsDao;
    private final PendingTasksDao pendingTasksDao;
    private final UserInfoDao userInfoDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        devicesDaoConfig = daoConfigMap.get(DevicesDao.class).clone();
        devicesDaoConfig.initIdentityScope(type);

        methodDevRelationDaoConfig = daoConfigMap.get(MethodDevRelationDao.class).clone();
        methodDevRelationDaoConfig.initIdentityScope(type);

        methodsDaoConfig = daoConfigMap.get(MethodsDao.class).clone();
        methodsDaoConfig.initIdentityScope(type);

        methodTagRelationDaoConfig = daoConfigMap.get(MethodTagRelationDao.class).clone();
        methodTagRelationDaoConfig.initIdentityScope(type);

        monItemMethodRelationDaoConfig = daoConfigMap.get(MonItemMethodRelationDao.class).clone();
        monItemMethodRelationDaoConfig.initIdentityScope(type);

        monItemsDaoConfig = daoConfigMap.get(MonItemsDao.class).clone();
        monItemsDaoConfig.initIdentityScope(type);

        monItemTagRelationDaoConfig = daoConfigMap.get(MonItemTagRelationDao.class).clone();
        monItemTagRelationDaoConfig.initIdentityScope(type);

        rightsDaoConfig = daoConfigMap.get(RightsDao.class).clone();
        rightsDaoConfig.initIdentityScope(type);

        tagsDaoConfig = daoConfigMap.get(TagsDao.class).clone();
        tagsDaoConfig.initIdentityScope(type);

        pendingTasksDaoConfig = daoConfigMap.get(PendingTasksDao.class).clone();
        pendingTasksDaoConfig.initIdentityScope(type);

        userInfoDaoConfig = daoConfigMap.get(UserInfoDao.class).clone();
        userInfoDaoConfig.initIdentityScope(type);

        devicesDao = new DevicesDao(devicesDaoConfig, this);
        methodDevRelationDao = new MethodDevRelationDao(methodDevRelationDaoConfig, this);
        methodsDao = new MethodsDao(methodsDaoConfig, this);
        methodTagRelationDao = new MethodTagRelationDao(methodTagRelationDaoConfig, this);
        monItemMethodRelationDao = new MonItemMethodRelationDao(monItemMethodRelationDaoConfig, this);
        monItemsDao = new MonItemsDao(monItemsDaoConfig, this);
        monItemTagRelationDao = new MonItemTagRelationDao(monItemTagRelationDaoConfig, this);
        rightsDao = new RightsDao(rightsDaoConfig, this);
        tagsDao = new TagsDao(tagsDaoConfig, this);
        pendingTasksDao = new PendingTasksDao(pendingTasksDaoConfig, this);
        userInfoDao = new UserInfoDao(userInfoDaoConfig, this);

        registerDao(Devices.class, devicesDao);
        registerDao(MethodDevRelation.class, methodDevRelationDao);
        registerDao(Methods.class, methodsDao);
        registerDao(MethodTagRelation.class, methodTagRelationDao);
        registerDao(MonItemMethodRelation.class, monItemMethodRelationDao);
        registerDao(MonItems.class, monItemsDao);
        registerDao(MonItemTagRelation.class, monItemTagRelationDao);
        registerDao(Rights.class, rightsDao);
        registerDao(Tags.class, tagsDao);
        registerDao(PendingTasks.class, pendingTasksDao);
        registerDao(UserInfo.class, userInfoDao);
    }
    
    public void clear() {
        devicesDaoConfig.clearIdentityScope();
        methodDevRelationDaoConfig.clearIdentityScope();
        methodsDaoConfig.clearIdentityScope();
        methodTagRelationDaoConfig.clearIdentityScope();
        monItemMethodRelationDaoConfig.clearIdentityScope();
        monItemsDaoConfig.clearIdentityScope();
        monItemTagRelationDaoConfig.clearIdentityScope();
        rightsDaoConfig.clearIdentityScope();
        tagsDaoConfig.clearIdentityScope();
        pendingTasksDaoConfig.clearIdentityScope();
        userInfoDaoConfig.clearIdentityScope();
    }

    public DevicesDao getDevicesDao() {
        return devicesDao;
    }

    public MethodDevRelationDao getMethodDevRelationDao() {
        return methodDevRelationDao;
    }

    public MethodsDao getMethodsDao() {
        return methodsDao;
    }

    public MethodTagRelationDao getMethodTagRelationDao() {
        return methodTagRelationDao;
    }

    public MonItemMethodRelationDao getMonItemMethodRelationDao() {
        return monItemMethodRelationDao;
    }

    public MonItemsDao getMonItemsDao() {
        return monItemsDao;
    }

    public MonItemTagRelationDao getMonItemTagRelationDao() {
        return monItemTagRelationDao;
    }

    public RightsDao getRightsDao() {
        return rightsDao;
    }

    public TagsDao getTagsDao() {
        return tagsDao;
    }

    public PendingTasksDao getPendingTasksDao() {
        return pendingTasksDao;
    }

    public UserInfoDao getUserInfoDao() {
        return userInfoDao;
    }

}
