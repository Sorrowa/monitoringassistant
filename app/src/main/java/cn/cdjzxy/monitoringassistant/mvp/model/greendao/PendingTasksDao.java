package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.sampling.PendingTasks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PENDING_TASKS".
*/
public class PendingTasksDao extends AbstractDao<PendingTasks, Void> {

    public static final String TABLENAME = "PENDING_TASKS";

    /**
     * Properties of entity PendingTasks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property UpdateTime = new Property(1, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ProjectNo = new Property(3, String.class, "projectNo", false, "PROJECT_NO");
        public final static Property Urgency = new Property(4, String.class, "urgency", false, "URGENCY");
        public final static Property ContractCode = new Property(5, String.class, "contractCode", false, "CONTRACT_CODE");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property MonType = new Property(7, String.class, "monType", false, "MON_TYPE");
        public final static Property ClientName = new Property(8, String.class, "clientName", false, "CLIENT_NAME");
        public final static Property ClientId = new Property(9, String.class, "clientId", false, "CLIENT_ID");
        public final static Property CreaterId = new Property(10, String.class, "createrId", false, "CREATER_ID");
        public final static Property CreaterName = new Property(11, String.class, "createrName", false, "CREATER_NAME");
        public final static Property RcvId = new Property(12, String.class, "rcvId", false, "RCV_ID");
        public final static Property RcvName = new Property(13, String.class, "rcvName", false, "RCV_NAME");
        public final static Property StartDate = new Property(14, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(15, String.class, "endDate", false, "END_DATE");
        public final static Property CurrentNodeType = new Property(16, String.class, "currentNodeType", false, "CURRENT_NODE_TYPE");
        public final static Property Status = new Property(17, String.class, "status", false, "STATUS");
        public final static Property AssignDate = new Property(18, String.class, "assignDate", false, "ASSIGN_DATE");
        public final static Property CreateDate = new Property(19, String.class, "createDate", false, "CREATE_DATE");
        public final static Property FinishState = new Property(20, boolean.class, "finishState", false, "FINISH_STATE");
        public final static Property FinishDate = new Property(21, String.class, "finishDate", false, "FINISH_DATE");
    }


    public PendingTasksDao(DaoConfig config) {
        super(config);
    }
    
    public PendingTasksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PENDING_TASKS\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"UPDATE_TIME\" TEXT," + // 1: updateTime
                "\"NAME\" TEXT," + // 2: name
                "\"PROJECT_NO\" TEXT," + // 3: projectNo
                "\"URGENCY\" TEXT," + // 4: urgency
                "\"CONTRACT_CODE\" TEXT," + // 5: contractCode
                "\"TYPE\" TEXT," + // 6: type
                "\"MON_TYPE\" TEXT," + // 7: monType
                "\"CLIENT_NAME\" TEXT," + // 8: clientName
                "\"CLIENT_ID\" TEXT," + // 9: clientId
                "\"CREATER_ID\" TEXT," + // 10: createrId
                "\"CREATER_NAME\" TEXT," + // 11: createrName
                "\"RCV_ID\" TEXT," + // 12: rcvId
                "\"RCV_NAME\" TEXT," + // 13: rcvName
                "\"START_DATE\" TEXT," + // 14: startDate
                "\"END_DATE\" TEXT," + // 15: endDate
                "\"CURRENT_NODE_TYPE\" TEXT," + // 16: currentNodeType
                "\"STATUS\" TEXT," + // 17: status
                "\"ASSIGN_DATE\" TEXT," + // 18: assignDate
                "\"CREATE_DATE\" TEXT," + // 19: createDate
                "\"FINISH_STATE\" INTEGER NOT NULL ," + // 20: finishState
                "\"FINISH_DATE\" TEXT);"); // 21: finishDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PENDING_TASKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PendingTasks entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String projectNo = entity.getProjectNo();
        if (projectNo != null) {
            stmt.bindString(4, projectNo);
        }
 
        String urgency = entity.getUrgency();
        if (urgency != null) {
            stmt.bindString(5, urgency);
        }
 
        String contractCode = entity.getContractCode();
        if (contractCode != null) {
            stmt.bindString(6, contractCode);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String monType = entity.getMonType();
        if (monType != null) {
            stmt.bindString(8, monType);
        }
 
        String clientName = entity.getClientName();
        if (clientName != null) {
            stmt.bindString(9, clientName);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(10, clientId);
        }
 
        String createrId = entity.getCreaterId();
        if (createrId != null) {
            stmt.bindString(11, createrId);
        }
 
        String createrName = entity.getCreaterName();
        if (createrName != null) {
            stmt.bindString(12, createrName);
        }
 
        String rcvId = entity.getRcvId();
        if (rcvId != null) {
            stmt.bindString(13, rcvId);
        }
 
        String rcvName = entity.getRcvName();
        if (rcvName != null) {
            stmt.bindString(14, rcvName);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(15, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(16, endDate);
        }
 
        String currentNodeType = entity.getCurrentNodeType();
        if (currentNodeType != null) {
            stmt.bindString(17, currentNodeType);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(18, status);
        }
 
        String assignDate = entity.getAssignDate();
        if (assignDate != null) {
            stmt.bindString(19, assignDate);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(20, createDate);
        }
        stmt.bindLong(21, entity.getFinishState() ? 1L: 0L);
 
        String finishDate = entity.getFinishDate();
        if (finishDate != null) {
            stmt.bindString(22, finishDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PendingTasks entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String projectNo = entity.getProjectNo();
        if (projectNo != null) {
            stmt.bindString(4, projectNo);
        }
 
        String urgency = entity.getUrgency();
        if (urgency != null) {
            stmt.bindString(5, urgency);
        }
 
        String contractCode = entity.getContractCode();
        if (contractCode != null) {
            stmt.bindString(6, contractCode);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String monType = entity.getMonType();
        if (monType != null) {
            stmt.bindString(8, monType);
        }
 
        String clientName = entity.getClientName();
        if (clientName != null) {
            stmt.bindString(9, clientName);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(10, clientId);
        }
 
        String createrId = entity.getCreaterId();
        if (createrId != null) {
            stmt.bindString(11, createrId);
        }
 
        String createrName = entity.getCreaterName();
        if (createrName != null) {
            stmt.bindString(12, createrName);
        }
 
        String rcvId = entity.getRcvId();
        if (rcvId != null) {
            stmt.bindString(13, rcvId);
        }
 
        String rcvName = entity.getRcvName();
        if (rcvName != null) {
            stmt.bindString(14, rcvName);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(15, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(16, endDate);
        }
 
        String currentNodeType = entity.getCurrentNodeType();
        if (currentNodeType != null) {
            stmt.bindString(17, currentNodeType);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(18, status);
        }
 
        String assignDate = entity.getAssignDate();
        if (assignDate != null) {
            stmt.bindString(19, assignDate);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(20, createDate);
        }
        stmt.bindLong(21, entity.getFinishState() ? 1L: 0L);
 
        String finishDate = entity.getFinishDate();
        if (finishDate != null) {
            stmt.bindString(22, finishDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PendingTasks readEntity(Cursor cursor, int offset) {
        PendingTasks entity = new PendingTasks( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // projectNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // urgency
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contractCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // monType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // clientName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // clientId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createrId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createrName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rcvId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // rcvName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // startDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // endDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // currentNodeType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // status
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // assignDate
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // createDate
            cursor.getShort(offset + 20) != 0, // finishState
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // finishDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PendingTasks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrgency(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContractCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMonType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClientName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClientId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreaterId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreaterName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRcvId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRcvName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStartDate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEndDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCurrentNodeType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStatus(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAssignDate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreateDate(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFinishState(cursor.getShort(offset + 20) != 0);
        entity.setFinishDate(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PendingTasks entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PendingTasks entity) {
        return null;
    }

    @Override
    public boolean hasKey(PendingTasks entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
