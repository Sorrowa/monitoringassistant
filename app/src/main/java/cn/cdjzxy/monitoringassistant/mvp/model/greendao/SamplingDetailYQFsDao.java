package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.sampling.SamplingDetailYQFs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLING_DETAIL_YQFS".
*/
public class SamplingDetailYQFsDao extends AbstractDao<SamplingDetailYQFs, String> {

    public static final String TABLENAME = "SAMPLING_DETAIL_YQFS";

    /**
     * Properties of entity SamplingDetailYQFs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property SamplingId = new Property(1, String.class, "SamplingId", false, "SAMPLING_ID");
        public final static Property SampingCode = new Property(2, String.class, "SampingCode", false, "SAMPING_CODE");
        public final static Property FrequecyNo = new Property(3, int.class, "FrequecyNo", false, "FREQUECY_NO");
        public final static Property OrderIndex = new Property(4, int.class, "OrderIndex", false, "ORDER_INDEX");
        public final static Property MonitemId = new Property(5, String.class, "MonitemId", false, "MONITEM_ID");
        public final static Property SamplingType = new Property(6, int.class, "SamplingType", false, "SAMPLING_TYPE");
        public final static Property ProjectId = new Property(7, String.class, "ProjectId", false, "PROJECT_ID");
        public final static Property UpdateTime = new Property(8, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Value = new Property(9, String.class, "Value", false, "VALUE");
        public final static Property AddressID = new Property(10, String.class, "AddressID", false, "ADDRESS_ID");
        public final static Property AddressName = new Property(11, String.class, "AddressName", false, "ADDRESS_NAME");
        public final static Property SamplingOnTime = new Property(12, String.class, "SamplingOnTime", false, "SAMPLING_ON_TIME");
        public final static Property PrivateData = new Property(13, String.class, "PrivateData", false, "PRIVATE_DATA");
    }


    public SamplingDetailYQFsDao(DaoConfig config) {
        super(config);
    }
    
    public SamplingDetailYQFsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLING_DETAIL_YQFS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"SAMPLING_ID\" TEXT," + // 1: SamplingId
                "\"SAMPING_CODE\" TEXT," + // 2: SampingCode
                "\"FREQUECY_NO\" INTEGER NOT NULL ," + // 3: FrequecyNo
                "\"ORDER_INDEX\" INTEGER NOT NULL ," + // 4: OrderIndex
                "\"MONITEM_ID\" TEXT," + // 5: MonitemId
                "\"SAMPLING_TYPE\" INTEGER NOT NULL ," + // 6: SamplingType
                "\"PROJECT_ID\" TEXT," + // 7: ProjectId
                "\"UPDATE_TIME\" TEXT," + // 8: UpdateTime
                "\"VALUE\" TEXT," + // 9: Value
                "\"ADDRESS_ID\" TEXT," + // 10: AddressID
                "\"ADDRESS_NAME\" TEXT," + // 11: AddressName
                "\"SAMPLING_ON_TIME\" TEXT," + // 12: SamplingOnTime
                "\"PRIVATE_DATA\" TEXT);"); // 13: PrivateData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLING_DETAIL_YQFS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SamplingDetailYQFs entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String SamplingId = entity.getSamplingId();
        if (SamplingId != null) {
            stmt.bindString(2, SamplingId);
        }
 
        String SampingCode = entity.getSampingCode();
        if (SampingCode != null) {
            stmt.bindString(3, SampingCode);
        }
        stmt.bindLong(4, entity.getFrequecyNo());
        stmt.bindLong(5, entity.getOrderIndex());
 
        String MonitemId = entity.getMonitemId();
        if (MonitemId != null) {
            stmt.bindString(6, MonitemId);
        }
        stmt.bindLong(7, entity.getSamplingType());
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(8, ProjectId);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(9, UpdateTime);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(10, Value);
        }
 
        String AddressID = entity.getAddressID();
        if (AddressID != null) {
            stmt.bindString(11, AddressID);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(12, AddressName);
        }
 
        String SamplingOnTime = entity.getSamplingOnTime();
        if (SamplingOnTime != null) {
            stmt.bindString(13, SamplingOnTime);
        }
 
        String PrivateData = entity.getPrivateData();
        if (PrivateData != null) {
            stmt.bindString(14, PrivateData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SamplingDetailYQFs entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String SamplingId = entity.getSamplingId();
        if (SamplingId != null) {
            stmt.bindString(2, SamplingId);
        }
 
        String SampingCode = entity.getSampingCode();
        if (SampingCode != null) {
            stmt.bindString(3, SampingCode);
        }
        stmt.bindLong(4, entity.getFrequecyNo());
        stmt.bindLong(5, entity.getOrderIndex());
 
        String MonitemId = entity.getMonitemId();
        if (MonitemId != null) {
            stmt.bindString(6, MonitemId);
        }
        stmt.bindLong(7, entity.getSamplingType());
 
        String ProjectId = entity.getProjectId();
        if (ProjectId != null) {
            stmt.bindString(8, ProjectId);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(9, UpdateTime);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(10, Value);
        }
 
        String AddressID = entity.getAddressID();
        if (AddressID != null) {
            stmt.bindString(11, AddressID);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(12, AddressName);
        }
 
        String SamplingOnTime = entity.getSamplingOnTime();
        if (SamplingOnTime != null) {
            stmt.bindString(13, SamplingOnTime);
        }
 
        String PrivateData = entity.getPrivateData();
        if (PrivateData != null) {
            stmt.bindString(14, PrivateData);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SamplingDetailYQFs readEntity(Cursor cursor, int offset) {
        SamplingDetailYQFs entity = new SamplingDetailYQFs( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SamplingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SampingCode
            cursor.getInt(offset + 3), // FrequecyNo
            cursor.getInt(offset + 4), // OrderIndex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MonitemId
            cursor.getInt(offset + 6), // SamplingType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ProjectId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UpdateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Value
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // AddressID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // AddressName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // SamplingOnTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // PrivateData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SamplingDetailYQFs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSamplingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSampingCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFrequecyNo(cursor.getInt(offset + 3));
        entity.setOrderIndex(cursor.getInt(offset + 4));
        entity.setMonitemId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSamplingType(cursor.getInt(offset + 6));
        entity.setProjectId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddressID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddressName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSamplingOnTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrivateData(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SamplingDetailYQFs entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SamplingDetailYQFs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SamplingDetailYQFs entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
