package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MonItems;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MonItemMethodRelation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MON_ITEM_METHOD_RELATION".
*/
public class MonItemMethodRelationDao extends AbstractDao<MonItemMethodRelation, String> {

    public static final String TABLENAME = "MON_ITEM_METHOD_RELATION";

    /**
     * Properties of entity MonItemMethodRelation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property MonItemId = new Property(1, String.class, "MonItemId", false, "MON_ITEM_ID");
        public final static Property MethodId = new Property(2, String.class, "MethodId", false, "METHOD_ID");
    }

    private DaoSession daoSession;


    public MonItemMethodRelationDao(DaoConfig config) {
        super(config);
    }
    
    public MonItemMethodRelationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MON_ITEM_METHOD_RELATION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"MON_ITEM_ID\" TEXT," + // 1: MonItemId
                "\"METHOD_ID\" TEXT);"); // 2: MethodId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MON_ITEM_METHOD_RELATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonItemMethodRelation entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String MonItemId = entity.getMonItemId();
        if (MonItemId != null) {
            stmt.bindString(2, MonItemId);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(3, MethodId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonItemMethodRelation entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String MonItemId = entity.getMonItemId();
        if (MonItemId != null) {
            stmt.bindString(2, MonItemId);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(3, MethodId);
        }
    }

    @Override
    protected final void attachEntity(MonItemMethodRelation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MonItemMethodRelation readEntity(Cursor cursor, int offset) {
        MonItemMethodRelation entity = new MonItemMethodRelation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MonItemId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // MethodId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonItemMethodRelation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMonItemId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMethodId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MonItemMethodRelation entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MonItemMethodRelation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonItemMethodRelation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMonItemsDao().getAllColumns());
            builder.append(" FROM MON_ITEM_METHOD_RELATION T");
            builder.append(" LEFT JOIN MON_ITEMS T0 ON T.\"MON_ITEM_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MonItemMethodRelation loadCurrentDeep(Cursor cursor, boolean lock) {
        MonItemMethodRelation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MonItems mMonItems = loadCurrentOther(daoSession.getMonItemsDao(), cursor, offset);
        entity.setMMonItems(mMonItems);

        return entity;    
    }

    public MonItemMethodRelation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MonItemMethodRelation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MonItemMethodRelation> list = new ArrayList<MonItemMethodRelation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MonItemMethodRelation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MonItemMethodRelation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
