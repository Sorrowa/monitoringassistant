package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.sampling.FormSelect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM_SELECT".
*/
public class FormSelectDao extends AbstractDao<FormSelect, Long> {

    public static final String TABLENAME = "FORM_SELECT";

    /**
     * Properties of entity FormSelect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Form_Id = new Property(1, long.class, "form_Id", false, "FORM__ID");
        public final static Property FormId = new Property(2, String.class, "FormId", false, "FORM_ID");
        public final static Property FormCode = new Property(3, String.class, "FormCode", false, "FORM_CODE");
        public final static Property FormName = new Property(4, String.class, "FormName", false, "FORM_NAME");
        public final static Property TagParentId = new Property(5, String.class, "TagParentId", false, "TAG_PARENT_ID");
        public final static Property TagId = new Property(6, String.class, "TagId", false, "TAG_ID");
        public final static Property Path = new Property(7, String.class, "Path", false, "PATH");
        public final static Property Flows = new Property(8, String.class, "Flows", false, "FLOWS");
    }

    private DaoSession daoSession;

    private Query<FormSelect> form_FormSelectListQuery;

    public FormSelectDao(DaoConfig config) {
        super(config);
    }
    
    public FormSelectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM_SELECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"FORM__ID\" INTEGER NOT NULL ," + // 1: form_Id
                "\"FORM_ID\" TEXT," + // 2: FormId
                "\"FORM_CODE\" TEXT," + // 3: FormCode
                "\"FORM_NAME\" TEXT," + // 4: FormName
                "\"TAG_PARENT_ID\" TEXT," + // 5: TagParentId
                "\"TAG_ID\" TEXT," + // 6: TagId
                "\"PATH\" TEXT," + // 7: Path
                "\"FLOWS\" TEXT);"); // 8: Flows
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM_SELECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FormSelect entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getForm_Id());
 
        String FormId = entity.getFormId();
        if (FormId != null) {
            stmt.bindString(3, FormId);
        }
 
        String FormCode = entity.getFormCode();
        if (FormCode != null) {
            stmt.bindString(4, FormCode);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(5, FormName);
        }
 
        String TagParentId = entity.getTagParentId();
        if (TagParentId != null) {
            stmt.bindString(6, TagParentId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(7, TagId);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(8, Path);
        }
 
        String Flows = entity.getFlows();
        if (Flows != null) {
            stmt.bindString(9, Flows);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FormSelect entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getForm_Id());
 
        String FormId = entity.getFormId();
        if (FormId != null) {
            stmt.bindString(3, FormId);
        }
 
        String FormCode = entity.getFormCode();
        if (FormCode != null) {
            stmt.bindString(4, FormCode);
        }
 
        String FormName = entity.getFormName();
        if (FormName != null) {
            stmt.bindString(5, FormName);
        }
 
        String TagParentId = entity.getTagParentId();
        if (TagParentId != null) {
            stmt.bindString(6, TagParentId);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(7, TagId);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(8, Path);
        }
 
        String Flows = entity.getFlows();
        if (Flows != null) {
            stmt.bindString(9, Flows);
        }
    }

    @Override
    protected final void attachEntity(FormSelect entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FormSelect readEntity(Cursor cursor, int offset) {
        FormSelect entity = new FormSelect( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // form_Id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FormId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FormCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FormName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TagParentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TagId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Flows
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FormSelect entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setForm_Id(cursor.getLong(offset + 1));
        entity.setFormId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFormCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFormName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTagParentId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTagId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFlows(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FormSelect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FormSelect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FormSelect entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "FormSelectList" to-many relationship of Form. */
    public List<FormSelect> _queryForm_FormSelectList(long form_Id) {
        synchronized (this) {
            if (form_FormSelectListQuery == null) {
                QueryBuilder<FormSelect> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Form_Id.eq(null));
                form_FormSelectListQuery = queryBuilder.build();
            }
        }
        Query<FormSelect> query = form_FormSelectListQuery.forCurrentThread();
        query.setParameter(0, form_Id);
        return query.list();
    }

}
