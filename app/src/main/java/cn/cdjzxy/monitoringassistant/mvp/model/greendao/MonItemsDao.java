package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.MonItems;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MON_ITEMS".
*/
public class MonItemsDao extends AbstractDao<MonItems, String> {

    public static final String TABLENAME = "MON_ITEMS";

    /**
     * Properties of entity MonItems.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property NameSpell = new Property(2, String.class, "NameSpell", false, "NAME_SPELL");
        public final static Property Code = new Property(3, String.class, "Code", false, "CODE");
        public final static Property Index = new Property(4, int.class, "Index", false, "INDEX");
        public final static Property Chemical = new Property(5, String.class, "Chemical", false, "CHEMICAL");
        public final static Property UpdateTime = new Property(6, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property UnitId = new Property(7, String.class, "UnitId", false, "UNIT_ID");
        public final static Property Ext1 = new Property(8, String.class, "Ext1", false, "EXT1");
        public final static Property Ext2 = new Property(9, String.class, "Ext2", false, "EXT2");
        public final static Property Ext3 = new Property(10, String.class, "Ext3", false, "EXT3");
        public final static Property EnName = new Property(11, String.class, "EnName", false, "EN_NAME");
        public final static Property EnShortName = new Property(12, String.class, "EnShortName", false, "EN_SHORT_NAME");
        public final static Property NoParell = new Property(13, boolean.class, "NoParell", false, "NO_PARELL");
        public final static Property TypeCode = new Property(14, String.class, "TypeCode", false, "TYPE_CODE");
        public final static Property CasCode = new Property(15, String.class, "CasCode", false, "CAS_CODE");
        public final static Property TypeName = new Property(16, String.class, "TypeName", false, "TYPE_NAME");
        public final static Property ParentId = new Property(17, String.class, "ParentId", false, "PARENT_ID");
        public final static Property Together = new Property(18, String.class, "Together", false, "TOGETHER");
        public final static Property UnitName = new Property(19, String.class, "UnitName", false, "UNIT_NAME");
        public final static Property ReportCode = new Property(20, String.class, "ReportCode", false, "REPORT_CODE");
        public final static Property MethodId = new Property(21, String.class, "MethodId", false, "METHOD_ID");
        public final static Property StandardCode = new Property(22, String.class, "StandardCode", false, "STANDARD_CODE");
        public final static Property MethodName = new Property(23, String.class, "MethodName", false, "METHOD_NAME");
        public final static Property HaveCert = new Property(24, String.class, "HaveCert", false, "HAVE_CERT");
        public final static Property TagId = new Property(25, String.class, "TagId", false, "TAG_ID");
        public final static Property ComplexConditionId = new Property(26, String.class, "ComplexConditionId", false, "COMPLEX_CONDITION_ID");
        public final static Property ComplexConditionName = new Property(27, String.class, "ComplexConditionName", false, "COMPLEX_CONDITION_NAME");
        public final static Property ValueType = new Property(28, String.class, "ValueType", false, "VALUE_TYPE");
        public final static Property ValueMin = new Property(29, String.class, "ValueMin", false, "VALUE_MIN");
        public final static Property ValueMax = new Property(30, String.class, "ValueMax", false, "VALUE_MAX");
        public final static Property Value = new Property(31, String.class, "Value", false, "VALUE");
        public final static Property EvaluateName = new Property(32, String.class, "EvaluateName", false, "EVALUATE_NAME");
        public final static Property IsSubcontracting = new Property(33, String.class, "IsSubcontracting", false, "IS_SUBCONTRACTING");
        public final static Property ClSampCount = new Property(34, int.class, "ClSampCount", false, "CL_SAMP_COUNT");
        public final static Property IsOutsourcing = new Property(35, boolean.class, "IsOutsourcing", false, "IS_OUTSOURCING");
        public final static Property UseCnt = new Property(36, int.class, "UseCnt", false, "USE_CNT");
    }


    public MonItemsDao(DaoConfig config) {
        super(config);
    }
    
    public MonItemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MON_ITEMS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"NAME_SPELL\" TEXT," + // 2: NameSpell
                "\"CODE\" TEXT," + // 3: Code
                "\"INDEX\" INTEGER NOT NULL ," + // 4: Index
                "\"CHEMICAL\" TEXT," + // 5: Chemical
                "\"UPDATE_TIME\" TEXT," + // 6: UpdateTime
                "\"UNIT_ID\" TEXT," + // 7: UnitId
                "\"EXT1\" TEXT," + // 8: Ext1
                "\"EXT2\" TEXT," + // 9: Ext2
                "\"EXT3\" TEXT," + // 10: Ext3
                "\"EN_NAME\" TEXT," + // 11: EnName
                "\"EN_SHORT_NAME\" TEXT," + // 12: EnShortName
                "\"NO_PARELL\" INTEGER NOT NULL ," + // 13: NoParell
                "\"TYPE_CODE\" TEXT," + // 14: TypeCode
                "\"CAS_CODE\" TEXT," + // 15: CasCode
                "\"TYPE_NAME\" TEXT," + // 16: TypeName
                "\"PARENT_ID\" TEXT," + // 17: ParentId
                "\"TOGETHER\" TEXT," + // 18: Together
                "\"UNIT_NAME\" TEXT," + // 19: UnitName
                "\"REPORT_CODE\" TEXT," + // 20: ReportCode
                "\"METHOD_ID\" TEXT," + // 21: MethodId
                "\"STANDARD_CODE\" TEXT," + // 22: StandardCode
                "\"METHOD_NAME\" TEXT," + // 23: MethodName
                "\"HAVE_CERT\" TEXT," + // 24: HaveCert
                "\"TAG_ID\" TEXT," + // 25: TagId
                "\"COMPLEX_CONDITION_ID\" TEXT," + // 26: ComplexConditionId
                "\"COMPLEX_CONDITION_NAME\" TEXT," + // 27: ComplexConditionName
                "\"VALUE_TYPE\" TEXT," + // 28: ValueType
                "\"VALUE_MIN\" TEXT," + // 29: ValueMin
                "\"VALUE_MAX\" TEXT," + // 30: ValueMax
                "\"VALUE\" TEXT," + // 31: Value
                "\"EVALUATE_NAME\" TEXT," + // 32: EvaluateName
                "\"IS_SUBCONTRACTING\" TEXT," + // 33: IsSubcontracting
                "\"CL_SAMP_COUNT\" INTEGER NOT NULL ," + // 34: ClSampCount
                "\"IS_OUTSOURCING\" INTEGER NOT NULL ," + // 35: IsOutsourcing
                "\"USE_CNT\" INTEGER NOT NULL );"); // 36: UseCnt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MON_ITEMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonItems entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String NameSpell = entity.getNameSpell();
        if (NameSpell != null) {
            stmt.bindString(3, NameSpell);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(4, Code);
        }
        stmt.bindLong(5, entity.getIndex());
 
        String Chemical = entity.getChemical();
        if (Chemical != null) {
            stmt.bindString(6, Chemical);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(7, UpdateTime);
        }
 
        String UnitId = entity.getUnitId();
        if (UnitId != null) {
            stmt.bindString(8, UnitId);
        }
 
        String Ext1 = entity.getExt1();
        if (Ext1 != null) {
            stmt.bindString(9, Ext1);
        }
 
        String Ext2 = entity.getExt2();
        if (Ext2 != null) {
            stmt.bindString(10, Ext2);
        }
 
        String Ext3 = entity.getExt3();
        if (Ext3 != null) {
            stmt.bindString(11, Ext3);
        }
 
        String EnName = entity.getEnName();
        if (EnName != null) {
            stmt.bindString(12, EnName);
        }
 
        String EnShortName = entity.getEnShortName();
        if (EnShortName != null) {
            stmt.bindString(13, EnShortName);
        }
        stmt.bindLong(14, entity.getNoParell() ? 1L: 0L);
 
        String TypeCode = entity.getTypeCode();
        if (TypeCode != null) {
            stmt.bindString(15, TypeCode);
        }
 
        String CasCode = entity.getCasCode();
        if (CasCode != null) {
            stmt.bindString(16, CasCode);
        }
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(17, TypeName);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(18, ParentId);
        }
 
        String Together = entity.getTogether();
        if (Together != null) {
            stmt.bindString(19, Together);
        }
 
        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(20, UnitName);
        }
 
        String ReportCode = entity.getReportCode();
        if (ReportCode != null) {
            stmt.bindString(21, ReportCode);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(22, MethodId);
        }
 
        String StandardCode = entity.getStandardCode();
        if (StandardCode != null) {
            stmt.bindString(23, StandardCode);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(24, MethodName);
        }
 
        String HaveCert = entity.getHaveCert();
        if (HaveCert != null) {
            stmt.bindString(25, HaveCert);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(26, TagId);
        }
 
        String ComplexConditionId = entity.getComplexConditionId();
        if (ComplexConditionId != null) {
            stmt.bindString(27, ComplexConditionId);
        }
 
        String ComplexConditionName = entity.getComplexConditionName();
        if (ComplexConditionName != null) {
            stmt.bindString(28, ComplexConditionName);
        }
 
        String ValueType = entity.getValueType();
        if (ValueType != null) {
            stmt.bindString(29, ValueType);
        }
 
        String ValueMin = entity.getValueMin();
        if (ValueMin != null) {
            stmt.bindString(30, ValueMin);
        }
 
        String ValueMax = entity.getValueMax();
        if (ValueMax != null) {
            stmt.bindString(31, ValueMax);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(32, Value);
        }
 
        String EvaluateName = entity.getEvaluateName();
        if (EvaluateName != null) {
            stmt.bindString(33, EvaluateName);
        }
 
        String IsSubcontracting = entity.getIsSubcontracting();
        if (IsSubcontracting != null) {
            stmt.bindString(34, IsSubcontracting);
        }
        stmt.bindLong(35, entity.getClSampCount());
        stmt.bindLong(36, entity.getIsOutsourcing() ? 1L: 0L);
        stmt.bindLong(37, entity.getUseCnt());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonItems entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String NameSpell = entity.getNameSpell();
        if (NameSpell != null) {
            stmt.bindString(3, NameSpell);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(4, Code);
        }
        stmt.bindLong(5, entity.getIndex());
 
        String Chemical = entity.getChemical();
        if (Chemical != null) {
            stmt.bindString(6, Chemical);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(7, UpdateTime);
        }
 
        String UnitId = entity.getUnitId();
        if (UnitId != null) {
            stmt.bindString(8, UnitId);
        }
 
        String Ext1 = entity.getExt1();
        if (Ext1 != null) {
            stmt.bindString(9, Ext1);
        }
 
        String Ext2 = entity.getExt2();
        if (Ext2 != null) {
            stmt.bindString(10, Ext2);
        }
 
        String Ext3 = entity.getExt3();
        if (Ext3 != null) {
            stmt.bindString(11, Ext3);
        }
 
        String EnName = entity.getEnName();
        if (EnName != null) {
            stmt.bindString(12, EnName);
        }
 
        String EnShortName = entity.getEnShortName();
        if (EnShortName != null) {
            stmt.bindString(13, EnShortName);
        }
        stmt.bindLong(14, entity.getNoParell() ? 1L: 0L);
 
        String TypeCode = entity.getTypeCode();
        if (TypeCode != null) {
            stmt.bindString(15, TypeCode);
        }
 
        String CasCode = entity.getCasCode();
        if (CasCode != null) {
            stmt.bindString(16, CasCode);
        }
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(17, TypeName);
        }
 
        String ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindString(18, ParentId);
        }
 
        String Together = entity.getTogether();
        if (Together != null) {
            stmt.bindString(19, Together);
        }
 
        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(20, UnitName);
        }
 
        String ReportCode = entity.getReportCode();
        if (ReportCode != null) {
            stmt.bindString(21, ReportCode);
        }
 
        String MethodId = entity.getMethodId();
        if (MethodId != null) {
            stmt.bindString(22, MethodId);
        }
 
        String StandardCode = entity.getStandardCode();
        if (StandardCode != null) {
            stmt.bindString(23, StandardCode);
        }
 
        String MethodName = entity.getMethodName();
        if (MethodName != null) {
            stmt.bindString(24, MethodName);
        }
 
        String HaveCert = entity.getHaveCert();
        if (HaveCert != null) {
            stmt.bindString(25, HaveCert);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(26, TagId);
        }
 
        String ComplexConditionId = entity.getComplexConditionId();
        if (ComplexConditionId != null) {
            stmt.bindString(27, ComplexConditionId);
        }
 
        String ComplexConditionName = entity.getComplexConditionName();
        if (ComplexConditionName != null) {
            stmt.bindString(28, ComplexConditionName);
        }
 
        String ValueType = entity.getValueType();
        if (ValueType != null) {
            stmt.bindString(29, ValueType);
        }
 
        String ValueMin = entity.getValueMin();
        if (ValueMin != null) {
            stmt.bindString(30, ValueMin);
        }
 
        String ValueMax = entity.getValueMax();
        if (ValueMax != null) {
            stmt.bindString(31, ValueMax);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(32, Value);
        }
 
        String EvaluateName = entity.getEvaluateName();
        if (EvaluateName != null) {
            stmt.bindString(33, EvaluateName);
        }
 
        String IsSubcontracting = entity.getIsSubcontracting();
        if (IsSubcontracting != null) {
            stmt.bindString(34, IsSubcontracting);
        }
        stmt.bindLong(35, entity.getClSampCount());
        stmt.bindLong(36, entity.getIsOutsourcing() ? 1L: 0L);
        stmt.bindLong(37, entity.getUseCnt());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MonItems readEntity(Cursor cursor, int offset) {
        MonItems entity = new MonItems( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NameSpell
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Code
            cursor.getInt(offset + 4), // Index
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Chemical
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UpdateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UnitId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Ext1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Ext2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Ext3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // EnName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // EnShortName
            cursor.getShort(offset + 13) != 0, // NoParell
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // TypeCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CasCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // TypeName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ParentId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Together
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // UnitName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ReportCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // MethodId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // StandardCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // MethodName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // HaveCert
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // TagId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ComplexConditionId
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ComplexConditionName
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // ValueType
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // ValueMin
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // ValueMax
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // Value
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // EvaluateName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // IsSubcontracting
            cursor.getInt(offset + 34), // ClSampCount
            cursor.getShort(offset + 35) != 0, // IsOutsourcing
            cursor.getInt(offset + 36) // UseCnt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonItems entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNameSpell(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex(cursor.getInt(offset + 4));
        entity.setChemical(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnitId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExt1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExt2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExt3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEnShortName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNoParell(cursor.getShort(offset + 13) != 0);
        entity.setTypeCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCasCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTypeName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setParentId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTogether(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUnitName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setReportCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMethodId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setStandardCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMethodName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHaveCert(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTagId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setComplexConditionId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setComplexConditionName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setValueType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setValueMin(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setValueMax(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setValue(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setEvaluateName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setIsSubcontracting(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setClSampCount(cursor.getInt(offset + 34));
        entity.setIsOutsourcing(cursor.getShort(offset + 35) != 0);
        entity.setUseCnt(cursor.getInt(offset + 36));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MonItems entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MonItems entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonItems entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
