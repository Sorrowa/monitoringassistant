package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.sampling.Form;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM".
*/
public class FormDao extends AbstractDao<Form, Long> {

    public static final String TABLENAME = "FORM";

    /**
     * Properties of entity Form.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TagId = new Property(1, String.class, "TagId", false, "TAG_ID");
        public final static Property TagName = new Property(2, String.class, "TagName", false, "TAG_NAME");
    }

    private DaoSession daoSession;


    public FormDao(DaoConfig config) {
        super(config);
    }
    
    public FormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TAG_ID\" TEXT," + // 1: TagId
                "\"TAG_NAME\" TEXT);"); // 2: TagName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Form entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(2, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(3, TagName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Form entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(2, TagId);
        }
 
        String TagName = entity.getTagName();
        if (TagName != null) {
            stmt.bindString(3, TagName);
        }
    }

    @Override
    protected final void attachEntity(Form entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Form readEntity(Cursor cursor, int offset) {
        Form entity = new Form( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TagId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // TagName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Form entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTagId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Form entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Form entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Form entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
