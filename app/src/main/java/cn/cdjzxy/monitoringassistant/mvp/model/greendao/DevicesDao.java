package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.Devices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICES".
*/
public class DevicesDao extends AbstractDao<Devices, String> {

    public static final String TABLENAME = "DEVICES";

    /**
     * Properties of entity Devices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Specification = new Property(2, String.class, "Specification", false, "SPECIFICATION");
        public final static Property SystemCode = new Property(3, String.class, "SystemCode", false, "SYSTEM_CODE");
        public final static Property DevCode = new Property(4, String.class, "DevCode", false, "DEV_CODE");
        public final static Property DepartmentId = new Property(5, String.class, "DepartmentId", false, "DEPARTMENT_ID");
        public final static Property Company = new Property(6, String.class, "Company", false, "COMPANY");
        public final static Property PurchasingDate = new Property(7, String.class, "PurchasingDate", false, "PURCHASING_DATE");
        public final static Property RePrice = new Property(8, int.class, "RePrice", false, "RE_PRICE");
        public final static Property StoreLoaction = new Property(9, String.class, "StoreLoaction", false, "STORE_LOACTION");
        public final static Property ExpireDate = new Property(10, String.class, "ExpireDate", false, "EXPIRE_DATE");
        public final static Property Manager = new Property(11, String.class, "Manager", false, "MANAGER");
        public final static Property State = new Property(12, int.class, "State", false, "STATE");
        public final static Property GroupId = new Property(13, String.class, "GroupId", false, "GROUP_ID");
        public final static Property IsForceChecked = new Property(14, boolean.class, "IsForceChecked", false, "IS_FORCE_CHECKED");
        public final static Property CertCode = new Property(15, String.class, "CertCode", false, "CERT_CODE");
        public final static Property UpdateTime = new Property(16, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Ext1 = new Property(17, String.class, "Ext1", false, "EXT1");
        public final static Property Ext2 = new Property(18, String.class, "Ext2", false, "EXT2");
        public final static Property Ext3 = new Property(19, String.class, "Ext3", false, "EXT3");
        public final static Property StateComment = new Property(20, String.class, "StateComment", false, "STATE_COMMENT");
        public final static Property Supplier = new Property(21, String.class, "Supplier", false, "SUPPLIER");
        public final static Property SupplierContact = new Property(22, String.class, "SupplierContact", false, "SUPPLIER_CONTACT");
        public final static Property SupplierPhone = new Property(23, String.class, "SupplierPhone", false, "SUPPLIER_PHONE");
        public final static Property SactoryContact = new Property(24, String.class, "SactoryContact", false, "SACTORY_CONTACT");
        public final static Property SactoryPhone = new Property(25, String.class, "SactoryPhone", false, "SACTORY_PHONE");
        public final static Property Sroperties = new Property(26, String.class, "Sroperties", false, "SROPERTIES");
        public final static Property Sgencies = new Property(27, String.class, "Sgencies", false, "SGENCIES");
        public final static Property SourceWay = new Property(28, String.class, "SourceWay", false, "SOURCE_WAY");
        public final static Property SourceDate = new Property(29, String.class, "SourceDate", false, "SOURCE_DATE");
        public final static Property SsLend = new Property(30, boolean.class, "SsLend", false, "SS_LEND");
        public final static Property SepartmentName = new Property(31, String.class, "SepartmentName", false, "SEPARTMENT_NAME");
        public final static Property HasUploadFile = new Property(32, boolean.class, "HasUploadFile", false, "HAS_UPLOAD_FILE");
        public final static Property StatusStr = new Property(33, String.class, "StatusStr", false, "STATUS_STR");
    }


    public DevicesDao(DaoConfig config) {
        super(config);
    }
    
    public DevicesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICES\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"SPECIFICATION\" TEXT," + // 2: Specification
                "\"SYSTEM_CODE\" TEXT," + // 3: SystemCode
                "\"DEV_CODE\" TEXT," + // 4: DevCode
                "\"DEPARTMENT_ID\" TEXT," + // 5: DepartmentId
                "\"COMPANY\" TEXT," + // 6: Company
                "\"PURCHASING_DATE\" TEXT," + // 7: PurchasingDate
                "\"RE_PRICE\" INTEGER NOT NULL ," + // 8: RePrice
                "\"STORE_LOACTION\" TEXT," + // 9: StoreLoaction
                "\"EXPIRE_DATE\" TEXT," + // 10: ExpireDate
                "\"MANAGER\" TEXT," + // 11: Manager
                "\"STATE\" INTEGER NOT NULL ," + // 12: State
                "\"GROUP_ID\" TEXT," + // 13: GroupId
                "\"IS_FORCE_CHECKED\" INTEGER NOT NULL ," + // 14: IsForceChecked
                "\"CERT_CODE\" TEXT," + // 15: CertCode
                "\"UPDATE_TIME\" TEXT," + // 16: UpdateTime
                "\"EXT1\" TEXT," + // 17: Ext1
                "\"EXT2\" TEXT," + // 18: Ext2
                "\"EXT3\" TEXT," + // 19: Ext3
                "\"STATE_COMMENT\" TEXT," + // 20: StateComment
                "\"SUPPLIER\" TEXT," + // 21: Supplier
                "\"SUPPLIER_CONTACT\" TEXT," + // 22: SupplierContact
                "\"SUPPLIER_PHONE\" TEXT," + // 23: SupplierPhone
                "\"SACTORY_CONTACT\" TEXT," + // 24: SactoryContact
                "\"SACTORY_PHONE\" TEXT," + // 25: SactoryPhone
                "\"SROPERTIES\" TEXT," + // 26: Sroperties
                "\"SGENCIES\" TEXT," + // 27: Sgencies
                "\"SOURCE_WAY\" TEXT," + // 28: SourceWay
                "\"SOURCE_DATE\" TEXT," + // 29: SourceDate
                "\"SS_LEND\" INTEGER NOT NULL ," + // 30: SsLend
                "\"SEPARTMENT_NAME\" TEXT," + // 31: SepartmentName
                "\"HAS_UPLOAD_FILE\" INTEGER NOT NULL ," + // 32: HasUploadFile
                "\"STATUS_STR\" TEXT);"); // 33: StatusStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Devices entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Specification = entity.getSpecification();
        if (Specification != null) {
            stmt.bindString(3, Specification);
        }
 
        String SystemCode = entity.getSystemCode();
        if (SystemCode != null) {
            stmt.bindString(4, SystemCode);
        }
 
        String DevCode = entity.getDevCode();
        if (DevCode != null) {
            stmt.bindString(5, DevCode);
        }
 
        String DepartmentId = entity.getDepartmentId();
        if (DepartmentId != null) {
            stmt.bindString(6, DepartmentId);
        }
 
        String Company = entity.getCompany();
        if (Company != null) {
            stmt.bindString(7, Company);
        }
 
        String PurchasingDate = entity.getPurchasingDate();
        if (PurchasingDate != null) {
            stmt.bindString(8, PurchasingDate);
        }
        stmt.bindLong(9, entity.getRePrice());
 
        String StoreLoaction = entity.getStoreLoaction();
        if (StoreLoaction != null) {
            stmt.bindString(10, StoreLoaction);
        }
 
        String ExpireDate = entity.getExpireDate();
        if (ExpireDate != null) {
            stmt.bindString(11, ExpireDate);
        }
 
        String Manager = entity.getManager();
        if (Manager != null) {
            stmt.bindString(12, Manager);
        }
        stmt.bindLong(13, entity.getState());
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(14, GroupId);
        }
        stmt.bindLong(15, entity.getIsForceChecked() ? 1L: 0L);
 
        String CertCode = entity.getCertCode();
        if (CertCode != null) {
            stmt.bindString(16, CertCode);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(17, UpdateTime);
        }
 
        String Ext1 = entity.getExt1();
        if (Ext1 != null) {
            stmt.bindString(18, Ext1);
        }
 
        String Ext2 = entity.getExt2();
        if (Ext2 != null) {
            stmt.bindString(19, Ext2);
        }
 
        String Ext3 = entity.getExt3();
        if (Ext3 != null) {
            stmt.bindString(20, Ext3);
        }
 
        String StateComment = entity.getStateComment();
        if (StateComment != null) {
            stmt.bindString(21, StateComment);
        }
 
        String Supplier = entity.getSupplier();
        if (Supplier != null) {
            stmt.bindString(22, Supplier);
        }
 
        String SupplierContact = entity.getSupplierContact();
        if (SupplierContact != null) {
            stmt.bindString(23, SupplierContact);
        }
 
        String SupplierPhone = entity.getSupplierPhone();
        if (SupplierPhone != null) {
            stmt.bindString(24, SupplierPhone);
        }
 
        String SactoryContact = entity.getSactoryContact();
        if (SactoryContact != null) {
            stmt.bindString(25, SactoryContact);
        }
 
        String SactoryPhone = entity.getSactoryPhone();
        if (SactoryPhone != null) {
            stmt.bindString(26, SactoryPhone);
        }
 
        String Sroperties = entity.getSroperties();
        if (Sroperties != null) {
            stmt.bindString(27, Sroperties);
        }
 
        String Sgencies = entity.getSgencies();
        if (Sgencies != null) {
            stmt.bindString(28, Sgencies);
        }
 
        String SourceWay = entity.getSourceWay();
        if (SourceWay != null) {
            stmt.bindString(29, SourceWay);
        }
 
        String SourceDate = entity.getSourceDate();
        if (SourceDate != null) {
            stmt.bindString(30, SourceDate);
        }
        stmt.bindLong(31, entity.getSsLend() ? 1L: 0L);
 
        String SepartmentName = entity.getSepartmentName();
        if (SepartmentName != null) {
            stmt.bindString(32, SepartmentName);
        }
        stmt.bindLong(33, entity.getHasUploadFile() ? 1L: 0L);
 
        String StatusStr = entity.getStatusStr();
        if (StatusStr != null) {
            stmt.bindString(34, StatusStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Devices entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Specification = entity.getSpecification();
        if (Specification != null) {
            stmt.bindString(3, Specification);
        }
 
        String SystemCode = entity.getSystemCode();
        if (SystemCode != null) {
            stmt.bindString(4, SystemCode);
        }
 
        String DevCode = entity.getDevCode();
        if (DevCode != null) {
            stmt.bindString(5, DevCode);
        }
 
        String DepartmentId = entity.getDepartmentId();
        if (DepartmentId != null) {
            stmt.bindString(6, DepartmentId);
        }
 
        String Company = entity.getCompany();
        if (Company != null) {
            stmt.bindString(7, Company);
        }
 
        String PurchasingDate = entity.getPurchasingDate();
        if (PurchasingDate != null) {
            stmt.bindString(8, PurchasingDate);
        }
        stmt.bindLong(9, entity.getRePrice());
 
        String StoreLoaction = entity.getStoreLoaction();
        if (StoreLoaction != null) {
            stmt.bindString(10, StoreLoaction);
        }
 
        String ExpireDate = entity.getExpireDate();
        if (ExpireDate != null) {
            stmt.bindString(11, ExpireDate);
        }
 
        String Manager = entity.getManager();
        if (Manager != null) {
            stmt.bindString(12, Manager);
        }
        stmt.bindLong(13, entity.getState());
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(14, GroupId);
        }
        stmt.bindLong(15, entity.getIsForceChecked() ? 1L: 0L);
 
        String CertCode = entity.getCertCode();
        if (CertCode != null) {
            stmt.bindString(16, CertCode);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(17, UpdateTime);
        }
 
        String Ext1 = entity.getExt1();
        if (Ext1 != null) {
            stmt.bindString(18, Ext1);
        }
 
        String Ext2 = entity.getExt2();
        if (Ext2 != null) {
            stmt.bindString(19, Ext2);
        }
 
        String Ext3 = entity.getExt3();
        if (Ext3 != null) {
            stmt.bindString(20, Ext3);
        }
 
        String StateComment = entity.getStateComment();
        if (StateComment != null) {
            stmt.bindString(21, StateComment);
        }
 
        String Supplier = entity.getSupplier();
        if (Supplier != null) {
            stmt.bindString(22, Supplier);
        }
 
        String SupplierContact = entity.getSupplierContact();
        if (SupplierContact != null) {
            stmt.bindString(23, SupplierContact);
        }
 
        String SupplierPhone = entity.getSupplierPhone();
        if (SupplierPhone != null) {
            stmt.bindString(24, SupplierPhone);
        }
 
        String SactoryContact = entity.getSactoryContact();
        if (SactoryContact != null) {
            stmt.bindString(25, SactoryContact);
        }
 
        String SactoryPhone = entity.getSactoryPhone();
        if (SactoryPhone != null) {
            stmt.bindString(26, SactoryPhone);
        }
 
        String Sroperties = entity.getSroperties();
        if (Sroperties != null) {
            stmt.bindString(27, Sroperties);
        }
 
        String Sgencies = entity.getSgencies();
        if (Sgencies != null) {
            stmt.bindString(28, Sgencies);
        }
 
        String SourceWay = entity.getSourceWay();
        if (SourceWay != null) {
            stmt.bindString(29, SourceWay);
        }
 
        String SourceDate = entity.getSourceDate();
        if (SourceDate != null) {
            stmt.bindString(30, SourceDate);
        }
        stmt.bindLong(31, entity.getSsLend() ? 1L: 0L);
 
        String SepartmentName = entity.getSepartmentName();
        if (SepartmentName != null) {
            stmt.bindString(32, SepartmentName);
        }
        stmt.bindLong(33, entity.getHasUploadFile() ? 1L: 0L);
 
        String StatusStr = entity.getStatusStr();
        if (StatusStr != null) {
            stmt.bindString(34, StatusStr);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Devices readEntity(Cursor cursor, int offset) {
        Devices entity = new Devices( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Specification
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SystemCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DevCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DepartmentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Company
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PurchasingDate
            cursor.getInt(offset + 8), // RePrice
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // StoreLoaction
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ExpireDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Manager
            cursor.getInt(offset + 12), // State
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // GroupId
            cursor.getShort(offset + 14) != 0, // IsForceChecked
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CertCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // UpdateTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Ext1
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Ext2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Ext3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // StateComment
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Supplier
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // SupplierContact
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // SupplierPhone
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // SactoryContact
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // SactoryPhone
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Sroperties
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // Sgencies
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // SourceWay
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // SourceDate
            cursor.getShort(offset + 30) != 0, // SsLend
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // SepartmentName
            cursor.getShort(offset + 32) != 0, // HasUploadFile
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // StatusStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Devices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpecification(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSystemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartmentId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompany(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPurchasingDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRePrice(cursor.getInt(offset + 8));
        entity.setStoreLoaction(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExpireDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setManager(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.getInt(offset + 12));
        entity.setGroupId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsForceChecked(cursor.getShort(offset + 14) != 0);
        entity.setCertCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUpdateTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setExt1(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setExt2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setExt3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStateComment(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSupplier(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSupplierContact(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSupplierPhone(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSactoryContact(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSactoryPhone(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSroperties(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSgencies(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSourceWay(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSourceDate(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSsLend(cursor.getShort(offset + 30) != 0);
        entity.setSepartmentName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setHasUploadFile(cursor.getShort(offset + 32) != 0);
        entity.setStatusStr(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Devices entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Devices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Devices entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
