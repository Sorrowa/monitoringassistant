package cn.cdjzxy.monitoringassistant.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cdjzxy.monitoringassistant.mvp.model.entity.base.Methods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "METHODS".
*/
public class MethodsDao extends AbstractDao<Methods, String> {

    public static final String TABLENAME = "METHODS";

    /**
     * Properties of entity Methods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property RelationItems = new Property(1, String.class, "RelationItems", false, "RELATION_ITEMS");
        public final static Property TagId = new Property(2, String.class, "TagId", false, "TAG_ID");
        public final static Property EsId = new Property(3, String.class, "EsId", false, "ES_ID");
        public final static Property GroupIdExt = new Property(4, String.class, "GroupIdExt", false, "GROUP_ID_EXT");
        public final static Property GroupId = new Property(5, String.class, "GroupId", false, "GROUP_ID");
        public final static Property Index = new Property(6, String.class, "Index", false, "INDEX");
        public final static Property FullName = new Property(7, String.class, "FullName", false, "FULL_NAME");
        public final static Property FullNameSpell = new Property(8, String.class, "FullNameSpell", false, "FULL_NAME_SPELL");
        public final static Property ShortName = new Property(9, String.class, "ShortName", false, "SHORT_NAME");
        public final static Property ShortNameSpell = new Property(10, String.class, "ShortNameSpell", false, "SHORT_NAME_SPELL");
        public final static Property StandardCode = new Property(11, String.class, "StandardCode", false, "STANDARD_CODE");
        public final static Property ReplaceSC = new Property(12, String.class, "ReplaceSC", false, "REPLACE_SC");
        public final static Property AttachFileId = new Property(13, String.class, "AttachFileId", false, "ATTACH_FILE_ID");
        public final static Property AttachFileName = new Property(14, String.class, "AttachFileName", false, "ATTACH_FILE_NAME");
        public final static Property PublishTime = new Property(15, String.class, "PublishTime", false, "PUBLISH_TIME");
        public final static Property ExecuteTime = new Property(16, String.class, "ExecuteTime", false, "EXECUTE_TIME");
        public final static Property Flag = new Property(17, String.class, "Flag", false, "FLAG");
        public final static Property IsDefault = new Property(18, String.class, "IsDefault", false, "IS_DEFAULT");
        public final static Property UpdateTime = new Property(19, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property FormulaPath = new Property(20, String.class, "FormulaPath", false, "FORMULA_PATH");
        public final static Property Ext1 = new Property(21, String.class, "Ext1", false, "EXT1");
        public final static Property Ext2 = new Property(22, String.class, "Ext2", false, "EXT2");
        public final static Property Ext3 = new Property(23, String.class, "Ext3", false, "EXT3");
        public final static Property OrgCode = new Property(24, String.class, "OrgCode", false, "ORG_CODE");
        public final static Property YearLimit = new Property(25, String.class, "YearLimit", false, "YEAR_LIMIT");
        public final static Property MethodType = new Property(26, String.class, "MethodType", false, "METHOD_TYPE");
        public final static Property StandardType = new Property(27, String.class, "StandardType", false, "STANDARD_TYPE");
        public final static Property MehodStatus = new Property(28, boolean.class, "MehodStatus", false, "MEHOD_STATUS");
        public final static Property AcceptRule = new Property(29, String.class, "AcceptRule", false, "ACCEPT_RULE");
        public final static Property CompareRule = new Property(30, String.class, "CompareRule", false, "COMPARE_RULE");
        public final static Property RoundRule = new Property(31, String.class, "RoundRule", false, "ROUND_RULE");
        public final static Property LabelType = new Property(32, int.class, "LabelType", false, "LABEL_TYPE");
        public final static Property Formula = new Property(33, String.class, "Formula", false, "FORMULA");
    }


    public MethodsDao(DaoConfig config) {
        super(config);
    }
    
    public MethodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"METHODS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"RELATION_ITEMS\" TEXT," + // 1: RelationItems
                "\"TAG_ID\" TEXT," + // 2: TagId
                "\"ES_ID\" TEXT," + // 3: EsId
                "\"GROUP_ID_EXT\" TEXT," + // 4: GroupIdExt
                "\"GROUP_ID\" TEXT," + // 5: GroupId
                "\"INDEX\" TEXT," + // 6: Index
                "\"FULL_NAME\" TEXT," + // 7: FullName
                "\"FULL_NAME_SPELL\" TEXT," + // 8: FullNameSpell
                "\"SHORT_NAME\" TEXT," + // 9: ShortName
                "\"SHORT_NAME_SPELL\" TEXT," + // 10: ShortNameSpell
                "\"STANDARD_CODE\" TEXT," + // 11: StandardCode
                "\"REPLACE_SC\" TEXT," + // 12: ReplaceSC
                "\"ATTACH_FILE_ID\" TEXT," + // 13: AttachFileId
                "\"ATTACH_FILE_NAME\" TEXT," + // 14: AttachFileName
                "\"PUBLISH_TIME\" TEXT," + // 15: PublishTime
                "\"EXECUTE_TIME\" TEXT," + // 16: ExecuteTime
                "\"FLAG\" TEXT," + // 17: Flag
                "\"IS_DEFAULT\" TEXT," + // 18: IsDefault
                "\"UPDATE_TIME\" TEXT," + // 19: UpdateTime
                "\"FORMULA_PATH\" TEXT," + // 20: FormulaPath
                "\"EXT1\" TEXT," + // 21: Ext1
                "\"EXT2\" TEXT," + // 22: Ext2
                "\"EXT3\" TEXT," + // 23: Ext3
                "\"ORG_CODE\" TEXT," + // 24: OrgCode
                "\"YEAR_LIMIT\" TEXT," + // 25: YearLimit
                "\"METHOD_TYPE\" TEXT," + // 26: MethodType
                "\"STANDARD_TYPE\" TEXT," + // 27: StandardType
                "\"MEHOD_STATUS\" INTEGER NOT NULL ," + // 28: MehodStatus
                "\"ACCEPT_RULE\" TEXT," + // 29: AcceptRule
                "\"COMPARE_RULE\" TEXT," + // 30: CompareRule
                "\"ROUND_RULE\" TEXT," + // 31: RoundRule
                "\"LABEL_TYPE\" INTEGER NOT NULL ," + // 32: LabelType
                "\"FORMULA\" TEXT);"); // 33: Formula
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"METHODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Methods entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String RelationItems = entity.getRelationItems();
        if (RelationItems != null) {
            stmt.bindString(2, RelationItems);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(3, TagId);
        }
 
        String EsId = entity.getEsId();
        if (EsId != null) {
            stmt.bindString(4, EsId);
        }
 
        String GroupIdExt = entity.getGroupIdExt();
        if (GroupIdExt != null) {
            stmt.bindString(5, GroupIdExt);
        }
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(6, GroupId);
        }
 
        String Index = entity.getIndex();
        if (Index != null) {
            stmt.bindString(7, Index);
        }
 
        String FullName = entity.getFullName();
        if (FullName != null) {
            stmt.bindString(8, FullName);
        }
 
        String FullNameSpell = entity.getFullNameSpell();
        if (FullNameSpell != null) {
            stmt.bindString(9, FullNameSpell);
        }
 
        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(10, ShortName);
        }
 
        String ShortNameSpell = entity.getShortNameSpell();
        if (ShortNameSpell != null) {
            stmt.bindString(11, ShortNameSpell);
        }
 
        String StandardCode = entity.getStandardCode();
        if (StandardCode != null) {
            stmt.bindString(12, StandardCode);
        }
 
        String ReplaceSC = entity.getReplaceSC();
        if (ReplaceSC != null) {
            stmt.bindString(13, ReplaceSC);
        }
 
        String AttachFileId = entity.getAttachFileId();
        if (AttachFileId != null) {
            stmt.bindString(14, AttachFileId);
        }
 
        String AttachFileName = entity.getAttachFileName();
        if (AttachFileName != null) {
            stmt.bindString(15, AttachFileName);
        }
 
        String PublishTime = entity.getPublishTime();
        if (PublishTime != null) {
            stmt.bindString(16, PublishTime);
        }
 
        String ExecuteTime = entity.getExecuteTime();
        if (ExecuteTime != null) {
            stmt.bindString(17, ExecuteTime);
        }
 
        String Flag = entity.getFlag();
        if (Flag != null) {
            stmt.bindString(18, Flag);
        }
 
        String IsDefault = entity.getIsDefault();
        if (IsDefault != null) {
            stmt.bindString(19, IsDefault);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(20, UpdateTime);
        }
 
        String FormulaPath = entity.getFormulaPath();
        if (FormulaPath != null) {
            stmt.bindString(21, FormulaPath);
        }
 
        String Ext1 = entity.getExt1();
        if (Ext1 != null) {
            stmt.bindString(22, Ext1);
        }
 
        String Ext2 = entity.getExt2();
        if (Ext2 != null) {
            stmt.bindString(23, Ext2);
        }
 
        String Ext3 = entity.getExt3();
        if (Ext3 != null) {
            stmt.bindString(24, Ext3);
        }
 
        String OrgCode = entity.getOrgCode();
        if (OrgCode != null) {
            stmt.bindString(25, OrgCode);
        }
 
        String YearLimit = entity.getYearLimit();
        if (YearLimit != null) {
            stmt.bindString(26, YearLimit);
        }
 
        String MethodType = entity.getMethodType();
        if (MethodType != null) {
            stmt.bindString(27, MethodType);
        }
 
        String StandardType = entity.getStandardType();
        if (StandardType != null) {
            stmt.bindString(28, StandardType);
        }
        stmt.bindLong(29, entity.getMehodStatus() ? 1L: 0L);
 
        String AcceptRule = entity.getAcceptRule();
        if (AcceptRule != null) {
            stmt.bindString(30, AcceptRule);
        }
 
        String CompareRule = entity.getCompareRule();
        if (CompareRule != null) {
            stmt.bindString(31, CompareRule);
        }
 
        String RoundRule = entity.getRoundRule();
        if (RoundRule != null) {
            stmt.bindString(32, RoundRule);
        }
        stmt.bindLong(33, entity.getLabelType());
 
        String Formula = entity.getFormula();
        if (Formula != null) {
            stmt.bindString(34, Formula);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Methods entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String RelationItems = entity.getRelationItems();
        if (RelationItems != null) {
            stmt.bindString(2, RelationItems);
        }
 
        String TagId = entity.getTagId();
        if (TagId != null) {
            stmt.bindString(3, TagId);
        }
 
        String EsId = entity.getEsId();
        if (EsId != null) {
            stmt.bindString(4, EsId);
        }
 
        String GroupIdExt = entity.getGroupIdExt();
        if (GroupIdExt != null) {
            stmt.bindString(5, GroupIdExt);
        }
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(6, GroupId);
        }
 
        String Index = entity.getIndex();
        if (Index != null) {
            stmt.bindString(7, Index);
        }
 
        String FullName = entity.getFullName();
        if (FullName != null) {
            stmt.bindString(8, FullName);
        }
 
        String FullNameSpell = entity.getFullNameSpell();
        if (FullNameSpell != null) {
            stmt.bindString(9, FullNameSpell);
        }
 
        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(10, ShortName);
        }
 
        String ShortNameSpell = entity.getShortNameSpell();
        if (ShortNameSpell != null) {
            stmt.bindString(11, ShortNameSpell);
        }
 
        String StandardCode = entity.getStandardCode();
        if (StandardCode != null) {
            stmt.bindString(12, StandardCode);
        }
 
        String ReplaceSC = entity.getReplaceSC();
        if (ReplaceSC != null) {
            stmt.bindString(13, ReplaceSC);
        }
 
        String AttachFileId = entity.getAttachFileId();
        if (AttachFileId != null) {
            stmt.bindString(14, AttachFileId);
        }
 
        String AttachFileName = entity.getAttachFileName();
        if (AttachFileName != null) {
            stmt.bindString(15, AttachFileName);
        }
 
        String PublishTime = entity.getPublishTime();
        if (PublishTime != null) {
            stmt.bindString(16, PublishTime);
        }
 
        String ExecuteTime = entity.getExecuteTime();
        if (ExecuteTime != null) {
            stmt.bindString(17, ExecuteTime);
        }
 
        String Flag = entity.getFlag();
        if (Flag != null) {
            stmt.bindString(18, Flag);
        }
 
        String IsDefault = entity.getIsDefault();
        if (IsDefault != null) {
            stmt.bindString(19, IsDefault);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(20, UpdateTime);
        }
 
        String FormulaPath = entity.getFormulaPath();
        if (FormulaPath != null) {
            stmt.bindString(21, FormulaPath);
        }
 
        String Ext1 = entity.getExt1();
        if (Ext1 != null) {
            stmt.bindString(22, Ext1);
        }
 
        String Ext2 = entity.getExt2();
        if (Ext2 != null) {
            stmt.bindString(23, Ext2);
        }
 
        String Ext3 = entity.getExt3();
        if (Ext3 != null) {
            stmt.bindString(24, Ext3);
        }
 
        String OrgCode = entity.getOrgCode();
        if (OrgCode != null) {
            stmt.bindString(25, OrgCode);
        }
 
        String YearLimit = entity.getYearLimit();
        if (YearLimit != null) {
            stmt.bindString(26, YearLimit);
        }
 
        String MethodType = entity.getMethodType();
        if (MethodType != null) {
            stmt.bindString(27, MethodType);
        }
 
        String StandardType = entity.getStandardType();
        if (StandardType != null) {
            stmt.bindString(28, StandardType);
        }
        stmt.bindLong(29, entity.getMehodStatus() ? 1L: 0L);
 
        String AcceptRule = entity.getAcceptRule();
        if (AcceptRule != null) {
            stmt.bindString(30, AcceptRule);
        }
 
        String CompareRule = entity.getCompareRule();
        if (CompareRule != null) {
            stmt.bindString(31, CompareRule);
        }
 
        String RoundRule = entity.getRoundRule();
        if (RoundRule != null) {
            stmt.bindString(32, RoundRule);
        }
        stmt.bindLong(33, entity.getLabelType());
 
        String Formula = entity.getFormula();
        if (Formula != null) {
            stmt.bindString(34, Formula);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Methods readEntity(Cursor cursor, int offset) {
        Methods entity = new Methods( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RelationItems
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TagId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EsId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GroupIdExt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // GroupId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Index
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FullName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FullNameSpell
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ShortName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ShortNameSpell
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // StandardCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ReplaceSC
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // AttachFileId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AttachFileName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // PublishTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ExecuteTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Flag
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // IsDefault
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // UpdateTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // FormulaPath
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Ext1
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Ext2
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Ext3
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // OrgCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // YearLimit
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // MethodType
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // StandardType
            cursor.getShort(offset + 28) != 0, // MehodStatus
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // AcceptRule
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // CompareRule
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // RoundRule
            cursor.getInt(offset + 32), // LabelType
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // Formula
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Methods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRelationItems(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEsId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupIdExt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFullName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFullNameSpell(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShortName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShortNameSpell(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStandardCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReplaceSC(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAttachFileId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAttachFileName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPublishTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setExecuteTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFlag(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsDefault(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFormulaPath(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setExt1(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setExt2(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setExt3(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOrgCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setYearLimit(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMethodType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setStandardType(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setMehodStatus(cursor.getShort(offset + 28) != 0);
        entity.setAcceptRule(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCompareRule(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRoundRule(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setLabelType(cursor.getInt(offset + 32));
        entity.setFormula(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Methods entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Methods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Methods entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
